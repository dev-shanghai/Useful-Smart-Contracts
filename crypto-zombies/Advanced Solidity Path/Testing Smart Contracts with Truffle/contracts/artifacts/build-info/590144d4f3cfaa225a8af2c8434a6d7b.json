{
	"id": "590144d4f3cfaa225a8af2c8434a6d7b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Testing Smart Contracts with Truffle/contracts/ownable.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.4.25 <0.9.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor()  {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Testing Smart Contracts with Truffle/contracts/ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \"user permissions\".",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
							},
							"isOwner()": {
								"returns": {
									"_0": "true if `msg.sender` is the owner of the contract."
								}
							},
							"owner()": {
								"returns": {
									"_0": "the address of the owner."
								}
							},
							"renounceOwnership()": {
								"details": "Allows the current owner to relinquish control of the contract."
							},
							"transferOwnership(address)": {
								"details": "Allows the current owner to transfer control of the contract to a newOwner.",
								"params": {
									"newOwner": "The address to transfer ownership to."
								}
							}
						},
						"title": "Ownable",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":263:2152  contract Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":551:657  constructor()  {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":585:595  msg.sender */\n  caller\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":576:582  _owner */\n  0x00\n  dup1\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":576:595  _owner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":643:649  _owner */\n  0x00\n  dup1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":610:650  OwnershipTransferred(address(0), _owner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":639:640  0 */\n  0x00\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":610:650  OwnershipTransferred(address(0), _owner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":263:2152  contract Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":263:2152  contract Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8f32d59b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1408:1545  function renounceOwnership() public onlyOwner {... */\n    tag_3:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      stop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":720:797  function owner() public view returns (address) {... */\n    tag_4:\n      tag_9\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      tag_11\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1040:1130  function isOwner() public view returns (bool) {... */\n    tag_5:\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1716:1823  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_6:\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      tag_20\n      jump\t// in\n    tag_17:\n      stop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1408:1545  function renounceOwnership() public onlyOwner {... */\n    tag_8:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:933  isOwner() */\n      tag_22\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:931  isOwner */\n      tag_14\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:933  isOwner() */\n      jump\t// in\n    tag_22:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":916:934  require(isOwner()) */\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1506:1507  0 */\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1469:1509  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1490:1496  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1469:1509  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1536:1537  0 */\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1519:1525  _owner */\n      dup1\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1519:1538  _owner = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1408:1545  function renounceOwnership() public onlyOwner {... */\n      jump\t// out\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":720:797  function owner() public view returns (address) {... */\n    tag_10:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":758:765  address */\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":784:790  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":777:790  return _owner */\n      swap1\n      pop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":720:797  function owner() public view returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1040:1130  function isOwner() public view returns (bool) {... */\n    tag_14:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1080:1084  bool */\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1117:1123  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1103:1123  msg.sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1103:1113  msg.sender */\n      caller\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1103:1123  msg.sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1096:1123  return msg.sender == _owner */\n      swap1\n      pop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1040:1130  function isOwner() public view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1716:1823  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_20:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:933  isOwner() */\n      tag_28\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:931  isOwner */\n      tag_14\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":924:933  isOwner() */\n      jump\t// in\n    tag_28:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":916:934  require(isOwner()) */\n      tag_29\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1788:1816  _transferOwnership(newOwner) */\n      tag_31\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1807:1815  newOwner */\n      dup2\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1788:1806  _transferOwnership */\n      tag_32\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1788:1816  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_31:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1716:1823  function transferOwnership(address newOwner) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1967:2150  function _transferOwnership(address newOwner) internal {... */\n    tag_32:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2060:2061  0 */\n      0x00\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2040:2062  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2040:2048  newOwner */\n      dup2\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2040:2062  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2032:2063  require(newOwner != address(0)) */\n      tag_34\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2107:2115  newOwner */\n      dup1\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2078:2116  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2099:2105  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2078:2116  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2135:2143  newOwner */\n      dup1\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2126:2132  _owner */\n      0x00\n      dup1\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":2126:2143  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Testing Smart Contracts with Truffle/contracts/ownable.sol\":1967:2150  function _transferOwnership(address newOwner) internal {... */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_36:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_38\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_39\n      jump\t// in\n    tag_38:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:481   */\n    tag_19:\n        /* \"#utility.yul\":211:217   */\n      0x00\n        /* \"#utility.yul\":260:262   */\n      0x20\n        /* \"#utility.yul\":248:257   */\n      dup3\n        /* \"#utility.yul\":239:246   */\n      dup5\n        /* \"#utility.yul\":235:258   */\n      sub\n        /* \"#utility.yul\":231:263   */\n      slt\n        /* \"#utility.yul\":228:347   */\n      iszero\n      tag_41\n      jumpi\n        /* \"#utility.yul\":266:345   */\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n        /* \"#utility.yul\":228:347   */\n    tag_41:\n        /* \"#utility.yul\":386:387   */\n      0x00\n        /* \"#utility.yul\":411:464   */\n      tag_44\n        /* \"#utility.yul\":456:463   */\n      dup5\n        /* \"#utility.yul\":447:453   */\n      dup3\n        /* \"#utility.yul\":436:445   */\n      dup6\n        /* \"#utility.yul\":432:454   */\n      add\n        /* \"#utility.yul\":411:464   */\n      tag_36\n      jump\t// in\n    tag_44:\n        /* \"#utility.yul\":401:464   */\n      swap2\n      pop\n        /* \"#utility.yul\":357:474   */\n      pop\n        /* \"#utility.yul\":152:481   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":487:605   */\n    tag_45:\n        /* \"#utility.yul\":574:598   */\n      tag_47\n        /* \"#utility.yul\":592:597   */\n      dup2\n        /* \"#utility.yul\":574:598   */\n      tag_48\n      jump\t// in\n    tag_47:\n        /* \"#utility.yul\":569:572   */\n      dup3\n        /* \"#utility.yul\":562:599   */\n      mstore\n        /* \"#utility.yul\":487:605   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":611:720   */\n    tag_49:\n        /* \"#utility.yul\":692:713   */\n      tag_51\n        /* \"#utility.yul\":707:712   */\n      dup2\n        /* \"#utility.yul\":692:713   */\n      tag_52\n      jump\t// in\n    tag_51:\n        /* \"#utility.yul\":687:690   */\n      dup3\n        /* \"#utility.yul\":680:714   */\n      mstore\n        /* \"#utility.yul\":611:720   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":726:948   */\n    tag_12:\n        /* \"#utility.yul\":819:823   */\n      0x00\n        /* \"#utility.yul\":857:859   */\n      0x20\n        /* \"#utility.yul\":846:855   */\n      dup3\n        /* \"#utility.yul\":842:860   */\n      add\n        /* \"#utility.yul\":834:860   */\n      swap1\n      pop\n        /* \"#utility.yul\":870:941   */\n      tag_54\n        /* \"#utility.yul\":938:939   */\n      0x00\n        /* \"#utility.yul\":927:936   */\n      dup4\n        /* \"#utility.yul\":923:940   */\n      add\n        /* \"#utility.yul\":914:920   */\n      dup5\n        /* \"#utility.yul\":870:941   */\n      tag_45\n      jump\t// in\n    tag_54:\n        /* \"#utility.yul\":726:948   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":954:1164   */\n    tag_16:\n        /* \"#utility.yul\":1041:1045   */\n      0x00\n        /* \"#utility.yul\":1079:1081   */\n      0x20\n        /* \"#utility.yul\":1068:1077   */\n      dup3\n        /* \"#utility.yul\":1064:1082   */\n      add\n        /* \"#utility.yul\":1056:1082   */\n      swap1\n      pop\n        /* \"#utility.yul\":1092:1157   */\n      tag_56\n        /* \"#utility.yul\":1154:1155   */\n      0x00\n        /* \"#utility.yul\":1143:1152   */\n      dup4\n        /* \"#utility.yul\":1139:1156   */\n      add\n        /* \"#utility.yul\":1130:1136   */\n      dup5\n        /* \"#utility.yul\":1092:1157   */\n      tag_49\n      jump\t// in\n    tag_56:\n        /* \"#utility.yul\":954:1164   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1251:1347   */\n    tag_48:\n        /* \"#utility.yul\":1288:1295   */\n      0x00\n        /* \"#utility.yul\":1317:1341   */\n      tag_60\n        /* \"#utility.yul\":1335:1340   */\n      dup3\n        /* \"#utility.yul\":1317:1341   */\n      tag_61\n      jump\t// in\n    tag_60:\n        /* \"#utility.yul\":1306:1341   */\n      swap1\n      pop\n        /* \"#utility.yul\":1251:1347   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1353:1443   */\n    tag_52:\n        /* \"#utility.yul\":1387:1394   */\n      0x00\n        /* \"#utility.yul\":1430:1435   */\n      dup2\n        /* \"#utility.yul\":1423:1436   */\n      iszero\n        /* \"#utility.yul\":1416:1437   */\n      iszero\n        /* \"#utility.yul\":1405:1437   */\n      swap1\n      pop\n        /* \"#utility.yul\":1353:1443   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1449:1575   */\n    tag_61:\n        /* \"#utility.yul\":1486:1493   */\n      0x00\n        /* \"#utility.yul\":1526:1568   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1519:1524   */\n      dup3\n        /* \"#utility.yul\":1515:1569   */\n      and\n        /* \"#utility.yul\":1504:1569   */\n      swap1\n      pop\n        /* \"#utility.yul\":1449:1575   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1704:1821   */\n    tag_43:\n        /* \"#utility.yul\":1813:1814   */\n      0x00\n        /* \"#utility.yul\":1810:1811   */\n      dup1\n        /* \"#utility.yul\":1803:1815   */\n      revert\n        /* \"#utility.yul\":1827:1949   */\n    tag_39:\n        /* \"#utility.yul\":1900:1924   */\n      tag_68\n        /* \"#utility.yul\":1918:1923   */\n      dup2\n        /* \"#utility.yul\":1900:1924   */\n      tag_48\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":1893:1898   */\n      dup2\n        /* \"#utility.yul\":1890:1925   */\n      eq\n        /* \"#utility.yul\":1880:1943   */\n      tag_69\n      jumpi\n        /* \"#utility.yul\":1939:1940   */\n      0x00\n        /* \"#utility.yul\":1936:1937   */\n      dup1\n        /* \"#utility.yul\":1929:1941   */\n      revert\n        /* \"#utility.yul\":1880:1943   */\n    tag_69:\n        /* \"#utility.yul\":1827:1949   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200019d9bbc2f02fa16e3fdb745fd1d00148655615506072756bcc36f14a82780d64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_28": {
									"entryPoint": null,
									"id": 28,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a361043c806100db6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b5780638f32d59b14610079578063f2fde38b14610097575b600080fd5b6100596100b3565b005b610063610182565b6040516100709190610376565b60405180910390f35b6100816101ab565b60405161008e9190610391565b60405180910390f35b6100b160048036038101906100ac919061032b565b610202565b005b6100bb6101ab565b6100c457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61020a6101ab565b61021357600080fd5b61021c8161021f565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561025957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081359050610325816103ef565b92915050565b600060208284031215610341576103406103ea565b5b600061034f84828501610316565b91505092915050565b610361816103ac565b82525050565b610370816103be565b82525050565b600060208201905061038b6000830184610358565b92915050565b60006020820190506103a66000830184610367565b92915050565b60006103b7826103ca565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6103f8816103ac565b811461040357600080fd5b5056fea26469706673582212200019d9bbc2f02fa16e3fdb745fd1d00148655615506072756bcc36f14a82780d64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x43C DUP1 PUSH2 0xDB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xB3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x182 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x376 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x81 PUSH2 0x1AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x32B JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBB PUSH2 0x1AB JUMP JUMPDEST PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x20A PUSH2 0x1AB JUMP JUMPDEST PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21C DUP2 PUSH2 0x21F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x325 DUP2 PUSH2 0x3EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x341 JUMPI PUSH2 0x340 PUSH2 0x3EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP5 DUP3 DUP6 ADD PUSH2 0x316 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x361 DUP2 PUSH2 0x3AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x370 DUP2 PUSH2 0x3BE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3A6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x367 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B7 DUP3 PUSH2 0x3CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F8 DUP2 PUSH2 0x3AC JUMP JUMPDEST DUP2 EQ PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP NOT 0xD9 0xBB 0xC2 CREATE 0x2F LOG1 PUSH15 0x3FDB745FD1D0014865561550607275 PUSH12 0xCC36F14A82780D64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "263:1889:0:-:0;;;551:106;;;;;;;;;;585:10;576:6;;:19;;;;;;;;;;;;;;;;;;643:6;;;;;;;;;;610:40;;639:1;610:40;;;;;;;;;;;;263:1889;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_transferOwnership_119": {
									"entryPoint": 543,
									"id": 119,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isOwner_59": {
									"entryPoint": 427,
									"id": 59,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_37": {
									"entryPoint": 386,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_81": {
									"entryPoint": 179,
									"id": 81,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_94": {
									"entryPoint": 514,
									"id": 94,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 790,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 811,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 856,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 871,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 886,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 913,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 940,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 958,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 970,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1002,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1007,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1952:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:1"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:1",
														"type": ""
													}
												],
												"src": "7:139:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "218:263:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "264:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "266:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "266:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "266:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "239:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "248:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "235:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "235:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "260:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "231:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:32:1"
															},
															"nodeType": "YulIf",
															"src": "228:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "357:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "372:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "386:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "376:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "401:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "436:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "447:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "432:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "432:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "456:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "411:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "411:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "401:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "188:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "199:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "211:6:1",
														"type": ""
													}
												],
												"src": "152:329:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "552:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "569:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "592:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "574:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "574:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "562:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "562:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "562:37:1"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "540:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "547:3:1",
														"type": ""
													}
												],
												"src": "487:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "670:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "687:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "707:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "692:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "692:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "680:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "680:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "680:34:1"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "658:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "665:3:1",
														"type": ""
													}
												],
												"src": "611:109:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "824:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "834:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "846:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "857:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "842:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "842:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "834:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "914:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "927:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "938:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "923:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "923:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "870:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "870:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "870:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "796:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "808:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "819:4:1",
														"type": ""
													}
												],
												"src": "726:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1046:118:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1056:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1068:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1079:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1064:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1064:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1056:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1130:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1143:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1154:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1139:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1139:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1092:37:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1092:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1092:65:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1018:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1030:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1041:4:1",
														"type": ""
													}
												],
												"src": "954:210:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1210:35:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1220:19:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1236:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1230:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1230:9:1"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1220:6:1"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1203:6:1",
														"type": ""
													}
												],
												"src": "1170:75:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1296:51:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1306:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1335:5:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1317:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1317:24:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1306:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1278:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1288:7:1",
														"type": ""
													}
												],
												"src": "1251:96:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1395:48:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1405:32:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1430:5:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1423:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1423:13:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1416:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1416:21:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1405:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1377:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1387:7:1",
														"type": ""
													}
												],
												"src": "1353:90:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1494:81:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1504:65:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1519:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1526:42:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1515:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1515:54:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1504:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1476:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1486:7:1",
														"type": ""
													}
												],
												"src": "1449:126:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1670:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1687:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1690:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1680:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1680:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1680:12:1"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1581:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1793:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1810:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1813:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1803:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1803:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1803:12:1"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1704:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1870:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1927:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1936:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1939:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1929:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1929:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1929:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1893:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1918:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1900:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1900:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1890:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1890:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1883:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1883:43:1"
															},
															"nodeType": "YulIf",
															"src": "1880:63:1"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1863:5:1",
														"type": ""
													}
												],
												"src": "1827:122:1"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b5780638f32d59b14610079578063f2fde38b14610097575b600080fd5b6100596100b3565b005b610063610182565b6040516100709190610376565b60405180910390f35b6100816101ab565b60405161008e9190610391565b60405180910390f35b6100b160048036038101906100ac919061032b565b610202565b005b6100bb6101ab565b6100c457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61020a6101ab565b61021357600080fd5b61021c8161021f565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561025957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081359050610325816103ef565b92915050565b600060208284031215610341576103406103ea565b5b600061034f84828501610316565b91505092915050565b610361816103ac565b82525050565b610370816103be565b82525050565b600060208201905061038b6000830184610358565b92915050565b60006020820190506103a66000830184610367565b92915050565b60006103b7826103ca565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6103f8816103ac565b811461040357600080fd5b5056fea26469706673582212200019d9bbc2f02fa16e3fdb745fd1d00148655615506072756bcc36f14a82780d64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xB3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x182 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x376 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x81 PUSH2 0x1AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x32B JUMP JUMPDEST PUSH2 0x202 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBB PUSH2 0x1AB JUMP JUMPDEST PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x20A PUSH2 0x1AB JUMP JUMPDEST PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21C DUP2 PUSH2 0x21F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x325 DUP2 PUSH2 0x3EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x341 JUMPI PUSH2 0x340 PUSH2 0x3EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP5 DUP3 DUP6 ADD PUSH2 0x316 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x361 DUP2 PUSH2 0x3AC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x370 DUP2 PUSH2 0x3BE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3A6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x367 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B7 DUP3 PUSH2 0x3CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F8 DUP2 PUSH2 0x3AC JUMP JUMPDEST DUP2 EQ PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP NOT 0xD9 0xBB 0xC2 CREATE 0x2F LOG1 PUSH15 0x3FDB745FD1D0014865561550607275 PUSH12 0xCC36F14A82780D64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "263:1889:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1408:137;;;:::i;:::-;;720:77;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1040:90;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1716:107;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1408:137;924:9;:7;:9::i;:::-;916:18;;;;;;1506:1:::1;1469:40;;1490:6;::::0;::::1;;;;;;;;1469:40;;;;;;;;;;;;1536:1;1519:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1408:137::o:0;720:77::-;758:7;784:6;;;;;;;;;;;777:13;;720:77;:::o;1040:90::-;1080:4;1117:6;;;;;;;;;;;1103:20;;:10;:20;;;1096:27;;1040:90;:::o;1716:107::-;924:9;:7;:9::i;:::-;916:18;;;;;;1788:28:::1;1807:8;1788:18;:28::i;:::-;1716:107:::0;:::o;1967:183::-;2060:1;2040:22;;:8;:22;;;;2032:31;;;;;;2107:8;2078:38;;2099:6;;;;;;;;;;2078:38;;;;;;;;;;;;2135:8;2126:6;;:17;;;;;;;;;;;;;;;;;;1967:183;:::o;7:139:1:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:329::-;211:6;260:2;248:9;239:7;235:23;231:32;228:119;;;266:79;;:::i;:::-;228:119;386:1;411:53;456:7;447:6;436:9;432:22;411:53;:::i;:::-;401:63;;357:117;152:329;;;;:::o;487:118::-;574:24;592:5;574:24;:::i;:::-;569:3;562:37;487:118;;:::o;611:109::-;692:21;707:5;692:21;:::i;:::-;687:3;680:34;611:109;;:::o;726:222::-;819:4;857:2;846:9;842:18;834:26;;870:71;938:1;927:9;923:17;914:6;870:71;:::i;:::-;726:222;;;;:::o;954:210::-;1041:4;1079:2;1068:9;1064:18;1056:26;;1092:65;1154:1;1143:9;1139:17;1130:6;1092:65;:::i;:::-;954:210;;;;:::o;1251:96::-;1288:7;1317:24;1335:5;1317:24;:::i;:::-;1306:35;;1251:96;;;:::o;1353:90::-;1387:7;1430:5;1423:13;1416:21;1405:32;;1353:90;;;:::o;1449:126::-;1486:7;1526:42;1519:5;1515:54;1504:65;;1449:126;;;:::o;1704:117::-;1813:1;1810;1803:12;1827:122;1900:24;1918:5;1900:24;:::i;:::-;1893:5;1890:35;1880:63;;1939:1;1936;1929:12;1880:63;1827:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "216800",
								"executionCost": "28201",
								"totalCost": "245001"
							},
							"external": {
								"isOwner()": "2518",
								"owner()": "2522",
								"renounceOwnership()": "30272",
								"transferOwnership(address)": "30716"
							},
							"internal": {
								"_transferOwnership(address)": "28003"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 657,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 657,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 657,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 551,
									"end": 657,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 585,
									"end": 595,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 576,
									"end": 582,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 576,
									"end": 582,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 576,
									"end": 595,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 576,
									"end": 595,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 576,
									"end": 595,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 576,
									"end": 595,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 643,
									"end": 649,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 643,
									"end": 649,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 643,
									"end": 649,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 643,
									"end": 649,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 639,
									"end": 640,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 610,
									"end": 650,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 610,
									"end": 650,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 2152,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200019d9bbc2f02fa16e3fdb745fd1d00148655615506072756bcc36f14a82780d64736f6c63430008070033",
									".code": [
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "8F32D59B"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "F2FDE38B"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 2152,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 924,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 924,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1507,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1490,
											"end": 1496,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1509,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1536,
											"end": 1537,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1525,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1519,
											"end": 1538,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1408,
											"end": 1545,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 758,
											"end": 765,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 784,
											"end": 790,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 784,
											"end": 790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 784,
											"end": 790,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 784,
											"end": 790,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 784,
											"end": 790,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 777,
											"end": 790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 777,
											"end": 790,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 720,
											"end": 797,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1080,
											"end": 1084,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1117,
											"end": 1123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1113,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1096,
											"end": 1123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1096,
											"end": 1123,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1130,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 924,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 924,
											"end": 931,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 924,
											"end": 933,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 916,
											"end": 934,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 916,
											"end": 934,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1788,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1807,
											"end": 1815,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1788,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1788,
											"end": 1816,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1788,
											"end": 1816,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1788,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1716,
											"end": 1823,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1967,
											"end": 2150,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1967,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2060,
											"end": 2061,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2040,
											"end": 2048,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 2032,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2107,
											"end": 2115,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2116,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2135,
											"end": 2143,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2132,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2126,
											"end": 2132,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2126,
											"end": 2143,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1967,
											"end": 2150,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1967,
											"end": 2150,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 481,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 152,
											"end": 481,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 211,
											"end": 217,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 262,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 248,
											"end": 257,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 239,
											"end": 246,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 235,
											"end": 258,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 231,
											"end": 263,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 228,
											"end": 347,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 228,
											"end": 347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 228,
											"end": 347,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 266,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 266,
											"end": 345,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 228,
											"end": 347,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 228,
											"end": 347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 386,
											"end": 387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 456,
											"end": 463,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 447,
											"end": 453,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 436,
											"end": 445,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 432,
											"end": 454,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 411,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 411,
											"end": 464,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 401,
											"end": 464,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 401,
											"end": 464,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 357,
											"end": 474,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 481,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 152,
											"end": 481,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 152,
											"end": 481,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 481,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 481,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 487,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 487,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 574,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 592,
											"end": 597,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 574,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 574,
											"end": 598,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 574,
											"end": 598,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 574,
											"end": 598,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 569,
											"end": 572,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 562,
											"end": 599,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 487,
											"end": 605,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 487,
											"end": 605,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 487,
											"end": 605,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 611,
											"end": 720,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 611,
											"end": 720,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 692,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 707,
											"end": 712,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 692,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 687,
											"end": 690,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 680,
											"end": 714,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 611,
											"end": 720,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 611,
											"end": 720,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 611,
											"end": 720,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 726,
											"end": 948,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 726,
											"end": 948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 819,
											"end": 823,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 857,
											"end": 859,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 846,
											"end": 855,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 842,
											"end": 860,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 834,
											"end": 860,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 834,
											"end": 860,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 870,
											"end": 941,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 938,
											"end": 939,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 927,
											"end": 936,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 923,
											"end": 940,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 914,
											"end": 920,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 870,
											"end": 941,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 870,
											"end": 941,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 870,
											"end": 941,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 870,
											"end": 941,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 726,
											"end": 948,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 726,
											"end": 948,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 726,
											"end": 948,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 726,
											"end": 948,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 726,
											"end": 948,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1041,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1079,
											"end": 1081,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1068,
											"end": 1077,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1064,
											"end": 1082,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1056,
											"end": 1082,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1056,
											"end": 1082,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1092,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 1154,
											"end": 1155,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1143,
											"end": 1152,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1139,
											"end": 1156,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1130,
											"end": 1136,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1092,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 1092,
											"end": 1157,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1092,
											"end": 1157,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 1092,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 954,
											"end": 1164,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1295,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1335,
											"end": 1340,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1317,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1306,
											"end": 1341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1306,
											"end": 1341,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1347,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1387,
											"end": 1394,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1430,
											"end": 1435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1423,
											"end": 1436,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1416,
											"end": 1437,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1405,
											"end": 1437,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1405,
											"end": 1437,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1353,
											"end": 1443,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1486,
											"end": 1493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1526,
											"end": 1568,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1519,
											"end": 1524,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1515,
											"end": 1569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1504,
											"end": 1569,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1504,
											"end": 1569,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1449,
											"end": 1575,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1704,
											"end": 1821,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1704,
											"end": 1821,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1813,
											"end": 1814,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1811,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1803,
											"end": 1815,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1949,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 1827,
											"end": 1949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1900,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1918,
											"end": 1923,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1900,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1900,
											"end": 1924,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1900,
											"end": 1924,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1900,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1893,
											"end": 1898,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1890,
											"end": 1925,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1880,
											"end": 1943,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 1880,
											"end": 1943,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1939,
											"end": 1940,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1936,
											"end": 1937,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1941,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1880,
											"end": 1943,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 1880,
											"end": 1943,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1949,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1949,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"isOwner()": "8f32d59b",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \\\"user permissions\\\".\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The Ownable constructor sets the original `owner` of the contract to the sender account.\"},\"isOwner()\":{\"returns\":{\"_0\":\"true if `msg.sender` is the owner of the contract.\"}},\"owner()\":{\"returns\":{\"_0\":\"the address of the owner.\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Testing Smart Contracts with Truffle/contracts/ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Testing Smart Contracts with Truffle/contracts/ownable.sol\":{\"keccak256\":\"0x7807d5999ed0db8a7aec27a8fd5bfa836f3790d6b1399c1baef67c0edc4884e9\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://f5ea0b7c72ea43504487b19dc226c2b58d5df15754c432431900121e5d164baf\",\"dweb:/ipfs/QmTJ1A41yTcUgNHju8k2fdK98TwCCwq9XdcFtZUCyBJLQN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 4,
								"contract": "Testing Smart Contracts with Truffle/contracts/ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"renounceOwnership()": {
								"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Testing Smart Contracts with Truffle/contracts/ownable.sol": {
				"ast": {
					"absolutePath": "Testing Smart Contracts with Truffle/contracts/ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							120
						]
					},
					"id": 121,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".25",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:32:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "73:189:0",
								"text": " @title Ownable\n @dev The Ownable contract has an owner address, and provides basic authorization control\n functions, this simplifies the implementation of \"user permissions\"."
							},
							"fullyImplemented": true,
							"id": 120,
							"linearizedBaseContracts": [
								120
							],
							"name": "Ownable",
							"nameLocation": "272:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 4,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "302:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 120,
									"src": "286:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "286:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 10,
									"name": "OwnershipTransferred",
									"nameLocation": "321:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "367:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "351:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "351:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "406:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "390:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "390:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:79:0"
									},
									"src": "315:106:0"
								},
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "566:91:0",
										"statements": [
											{
												"expression": {
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 14,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "576:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "585:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "585:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "576:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "576:19:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 22,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "639:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 21,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "631:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 20,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 23,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "631:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 24,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "643:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 19,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "610:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "610:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 26,
												"nodeType": "EmitStatement",
												"src": "605:45:0"
											}
										]
									},
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "427:119:0",
										"text": " @dev The Ownable constructor sets the original `owner` of the contract to the sender\n account."
									},
									"id": 28,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "562:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "566:0:0"
									},
									"scope": 120,
									"src": "551:106:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "767:30:0",
										"statements": [
											{
												"expression": {
													"id": 34,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4,
													"src": "784:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 33,
												"id": 35,
												"nodeType": "Return",
												"src": "777:13:0"
											}
										]
									},
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "663:52:0",
										"text": " @return the address of the owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "729:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "758:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "758:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "757:9:0"
									},
									"scope": 120,
									"src": "720:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 46,
										"nodeType": "Block",
										"src": "906:46:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 41,
																"name": "isOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 59,
																"src": "924:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "924:9:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 40,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "916:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "916:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "916:18:0"
											},
											{
												"id": 45,
												"nodeType": "PlaceholderStatement",
												"src": "944:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "803:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 47,
									"name": "onlyOwner",
									"nameLocation": "894:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "903:2:0"
									},
									"src": "885:67:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 58,
										"nodeType": "Block",
										"src": "1086:44:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 53,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1103:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 54,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1103:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 55,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "1117:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1103:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 52,
												"id": 57,
												"nodeType": "Return",
												"src": "1096:27:0"
											}
										]
									},
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "958:77:0",
										"text": " @return true if `msg.sender` is the owner of the contract."
									},
									"functionSelector": "8f32d59b",
									"id": 59,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nameLocation": "1049:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1056:2:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "1080:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 50,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1080:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1079:6:0"
									},
									"scope": 120,
									"src": "1040:90:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "1454:91:0",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 66,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "1490:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1506:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1498:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 67,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1498:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1498:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 65,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1469:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1469:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "EmitStatement",
												"src": "1464:45:0"
											},
											{
												"expression": {
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 73,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "1519:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1536:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 74,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1528:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 77,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1528:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1519:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "1519:19:0"
											}
										]
									},
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "1136:267:0",
										"text": " @dev Allows the current owner to relinquish control of the contract.\n @notice Renouncing to ownership will leave the contract without an owner.\n It will not be possible to call the functions with the `onlyOwner`\n modifier anymore."
									},
									"functionSelector": "715018a6",
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 63,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 62,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 47,
												"src": "1444:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1444:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1417:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1434:2:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1454:0:0"
									},
									"scope": 120,
									"src": "1408:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "1778:45:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 90,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 84,
															"src": "1807:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 89,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "1788:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1788:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "1788:28:0"
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "1551:160:0",
										"text": " @dev Allows the current owner to transfer control of the contract to a newOwner.\n @param newOwner The address to transfer ownership to."
									},
									"functionSelector": "f2fde38b",
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 87,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 86,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 47,
												"src": "1768:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1768:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1725:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1751:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1743:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 83,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1743:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1742:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1778:0:0"
									},
									"scope": 120,
									"src": "1716:107:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 118,
										"nodeType": "Block",
										"src": "2022:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 101,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "2040:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2060:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2052:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 102,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2052:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2052:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2040:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2032:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2032:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 108,
												"nodeType": "ExpressionStatement",
												"src": "2032:31:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 110,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "2099:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 111,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "2107:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 109,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2078:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2078:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 113,
												"nodeType": "EmitStatement",
												"src": "2073:43:0"
											},
											{
												"expression": {
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 114,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4,
														"src": "2126:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 115,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "2135:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2126:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 117,
												"nodeType": "ExpressionStatement",
												"src": "2126:17:0"
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "1829:133:0",
										"text": " @dev Transfers control of the contract to a newOwner.\n @param newOwner The address to transfer ownership to."
									},
									"id": 119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "1976:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2003:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "1995:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1995:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1994:18:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2022:0:0"
									},
									"scope": 120,
									"src": "1967:183:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 121,
							"src": "263:1889:0",
							"usedErrors": []
						}
					],
					"src": "39:2114:0"
				},
				"id": 0
			}
		}
	}
}